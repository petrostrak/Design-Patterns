Intent:

Define a family of algorithms, encapsulate each one, and make them interchangeable. 
Strategy lets the algorithm vary independently from clients that use it.

Also know as : Policy.

Use the Strategy Design Pattern when :

-> many related classes differ only in ther behavior. Strategies provide a way to configure
   a class with one of many behaviors.

-> you need different variants of an algorithm. For example, you might define algorithms reflecting
   different space/ time trade-offs. Strategies can be used when these varians are implemented as
   a class hierarchy of algorithms.
   
-> an algorithm uses data that clients shouldnÂ´t know about. Use the Strategy pattern to avoid exposing 
   complex, algorithm-specific data structures.
   
-> a class defines many behaviors, and these appear as multiple conditional statements in its
   operations. Instead of many conditionals, move related conditional branches into their own
   Strategy class.
   
   
